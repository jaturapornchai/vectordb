package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"path/filepath"
	"strings"
	"sync"
)

// SearchRequest for text search
type SearchRequestSimple struct {
	Query      string `json:"query"`
	UseSummary bool   `json:"useSummary"`
}

// SearchResponse for text search
type SearchResponseSimple struct {
	Query   string               `json:"query"`
	Results []SearchResultSimple `json:"results"`
	Total   int                  `json:"total"`
	Summary string               `json:"summary,omitempty"`
	Error   string               `json:"error,omitempty"`
}

type SearchResultSimple struct {
	Content  string `json:"content"`
	Filename string `json:"filename"`
	LineNum  int    `json:"line_number"`
}

func enableCORSSimple(w http.ResponseWriter) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS")
	w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
}

func healthHandlerSimple(w http.ResponseWriter, r *http.Request) {
	enableCORSSimple(w)
	if r.Method == "OPTIONS" {
		return
	}

	status := map[string]interface{}{
		"status":  "healthy",
		"service": "text-search-api",
		"message": "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå markdown ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á",
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(status)
}

func searchHandlerSimple(w http.ResponseWriter, r *http.Request) {
	enableCORSSimple(w)
	if r.Method == "OPTIONS" {
		return
	}

	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var req SearchRequestSimple
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		response := SearchResponseSimple{Error: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	if req.Query == "" {
		response := SearchResponseSimple{Error: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(response)
		return
	}

	log.Printf("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤: '%s'", req.Query)

	// ‡πÉ‡∏ä‡πâ Ollama ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏©‡∏≤, ‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á, ‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î, ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏≥)
	keywords := smartSearchKeywords(cfg, req.Query)
	log.Printf("üß† Ollama ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ %d ‡∏Ñ‡∏≥: %v", len(keywords), keywords)

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå doc/
	docPath := "./doc"

	// ‚ö° ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (Concurrent Search)
	var allMatches []Match
	var mu sync.Mutex
	var wg sync.WaitGroup

	for _, keyword := range keywords {
		wg.Add(1)
		go func(kw string) {
			defer wg.Done()

			log.Printf("   üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥: '%s'", kw)
			matches := searchInDirectory(docPath, "", kw, 3, 3) // 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô-‡∏´‡∏•‡∏±‡∏á

			mu.Lock()
			allMatches = append(allMatches, matches...)
			mu.Unlock()

			log.Printf("      ‡∏û‡∏ö %d ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå", len(matches))
		}(keyword)
	}

	// ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å keyword ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à
	wg.Wait()

	// ‡∏•‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ã‡πâ‡∏≥
	uniqueMatches := removeDuplicateMatches(allMatches)
	log.Printf("üìä ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î %d ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡∏´‡∏•‡∏±‡∏á‡∏•‡∏ö‡∏ã‡πâ‡∏≥‡∏à‡∏≤‡∏Å %d)", len(uniqueMatches), len(allMatches))

	// ‡πÅ‡∏õ‡∏•‡∏á matches ‡πÄ‡∏õ‡πá‡∏ô SearchResultSimple format
	var results []SearchResultSimple
	for _, match := range uniqueMatches {
		// ‡∏£‡∏ß‡∏° context ‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
		contextText := strings.Join(match.Context, "\n")

		results = append(results, SearchResultSimple{
			Content:  contextText,
			Filename: filepath.Base(match.Filename),
			LineNum:  match.LineNum,
		})
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	var summary string
	if req.UseSummary && len(uniqueMatches) > 0 {
		log.Printf("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI...")
		contextForAI := formatMatchesForAI(uniqueMatches, req.Query)
		// ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° filename + line_number ‡πÉ‡∏´‡πâ AI ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤
		sourceInfo := buildSourceInfo(uniqueMatches)
		summary = summarizeResultsSimple(contextForAI, req.Query, sourceInfo)
		if summary != "" {
			log.Printf("‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢ AI ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		}
	}

	response := SearchResponseSimple{
		Query:   req.Query,
		Results: results,
		Total:   len(results),
		Summary: summary,
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(response)
}

// buildSourceInfo ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ AI ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏´‡∏ô
func buildSourceInfo(matches []Match) string {
	var builder strings.Builder
	builder.WriteString("\n\n=== ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===\n")

	maxSources := 10
	for i, match := range matches {
		if i >= maxSources {
			break
		}
		builder.WriteString(fmt.Sprintf("- ‡πÑ‡∏ü‡∏•‡πå: %s, ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î: %d\n",
			filepath.Base(match.Filename), match.LineNum))
	}

	if len(matches) > maxSources {
		builder.WriteString(fmt.Sprintf("... ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡∏Å %d ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô\n", len(matches)-maxSources))
	}

	return builder.String()
}

// summarizeResultsSimple calls AI to summarize search results
func summarizeResultsSimple(context, query, sourceInfo string) string {
	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÉ‡∏´‡πâ AI
	fullContext := context + sourceInfo

	// ‡∏•‡∏≠‡∏á Gemini ‡∏Å‡πà‡∏≠‡∏ô
	summary, err := summarizeWithGeminiText(cfg.GeminiAPIKey, fullContext, query)
	if err == nil && summary != "" {
		log.Printf("‚úÖ ‡πÉ‡∏ä‡πâ Gemini ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		return summary
	}

	log.Printf("‚ö†Ô∏è  Gemini ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡∏•‡∏≠‡∏á DeepSeek...")

	// ‡∏ñ‡πâ‡∏≤ Gemini ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏≠‡∏á DeepSeek
	summary, err = summarizeWithDeepSeekText(cfg.DeepSeekAPIKey, fullContext, query)
	if err == nil && summary != "" {
		log.Printf("‚úÖ ‡πÉ‡∏ä‡πâ DeepSeek ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		return summary
	}

	log.Printf("‚ùå ‡∏ó‡∏±‡πâ‡∏á Gemini ‡πÅ‡∏•‡∏∞ DeepSeek ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
	return fmt.Sprintf("‡∏û‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö '%s'", query)
}
