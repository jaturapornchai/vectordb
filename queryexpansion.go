package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
)

// OllamaQueryExpansionRequest for Ollama API
type OllamaQueryExpansionRequest struct {
	Model  string `json:"model"`
	Prompt string `json:"prompt"`
	Stream bool   `json:"stream"`
}

// OllamaQueryExpansionResponse from Ollama
type OllamaQueryExpansionResponse struct {
	Response string `json:"response"`
}

// ExpandQueryWithOllama ‡πÉ‡∏ä‡πâ Ollama LLM ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ + ‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤
func expandQueryWithOllama(cfg *Config, query string) []string {
	prompt := fmt.Sprintf(`‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©

‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "%s"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢:
1. **‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤**: ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© / ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ó‡∏¢
2. ‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á ‡∏Å‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á)
3. ‡πÅ‡∏Å‡πâ‡∏Ñ‡∏≥‡∏™‡∏∞‡∏Å‡∏î‡∏ú‡∏¥‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)

‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢

**‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∞‡∏™‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏≤‡πÄ‡∏à‡∏≠‡∏á‡πà‡∏≤‡∏¢ 
‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î ‡πÄ‡∏ä‡πà‡∏ô , . / \ ' " ( ) [ ] { } < > @ # $ % ^ & * - + = ~  ! ?
‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏Å‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà ai ‡∏Ñ‡∏¥‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏¢‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏´‡∏≤‡πÄ‡∏à‡∏≠ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏î

‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ß‡πà‡∏≤: fail`, query)

	reqBody := OllamaQueryExpansionRequest{
		Model:  "llama3.2", // ‡πÉ‡∏ä‡πâ model ‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
		Prompt: prompt,
		Stream: false,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		log.Printf("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %v", err)
		return []string{query}
	}

	resp, err := http.Post(cfg.OllamaHost+"/api/generate", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		log.Printf("‚ùå ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Ollama ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %v", err)
		return []string{"fail"}
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		log.Printf("‚ùå Ollama API error: %s", string(body))
		return []string{"fail"}
	}

	var ollamaResp OllamaQueryExpansionResponse
	if err := json.NewDecoder(resp.Body).Decode(&ollamaResp); err != nil {
		log.Printf("‚ùå Decode response ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: %v", err)
		return []string{"fail"}
	}

	// ‡∏ñ‡πâ‡∏≤ Ollama ‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "fail" ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏°
	response := strings.TrimSpace(ollamaResp.Response)
	if strings.ToLower(response) == "fail" {
		log.Printf("‚ö†Ô∏è  Ollama ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÄ‡∏î‡∏¥‡∏°")
		return []string{query}
	}

	// ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å Ollama + ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏î‡πâ‡∏ß‡∏¢ mapkha
	result := extractSearchKeywords(response)

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° query ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
	originalLower := strings.ToLower(query)
	hasOriginal := false
	for _, r := range result {
		if strings.ToLower(r) == originalLower {
			hasOriginal = true
			break
		}
	}
	if !hasOriginal {
		result = append([]string{query}, result...)
	}

	// ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 15 ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡πÅ‡∏•‡πâ‡∏ß)
	if len(result) > 15 {
		result = result[:15]
	}

	log.Printf("üîÑ ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ (‡∏û‡∏£‡πâ‡∏≠‡∏° mapkha segmentation): %v", result)

	return result
}

// SmartSearchKeywords ‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
func smartSearchKeywords(cfg *Config, query string) []string {
	// 1. ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ Ollama (‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤ + ‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á + ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á)
	expandedQueries := expandQueryWithOllama(cfg, query)

	// ‡∏ñ‡πâ‡∏≤ Ollama fail ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡πÄ‡∏î‡∏¥‡∏° + ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢
	if len(expandedQueries) == 1 && expandedQueries[0] == "fail" {
		log.Printf("‚ö†Ô∏è  Ollama fail ‚Üí ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏î‡∏¥‡∏° + ‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢")
		simpleWords := extractKeywords(query)
		return simpleWords
	}

	// 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡∏≥‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
	simpleWords := extractKeywords(query)

	// ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
	allKeywords := append(expandedQueries, simpleWords...)

	// ‡∏•‡∏ö‡∏ã‡πâ‡∏≥
	uniqueKeywords := make(map[string]bool)
	var final []string

	for _, kw := range allKeywords {
		lower := strings.ToLower(kw)
		if !uniqueKeywords[lower] && len(kw) >= 2 {
			uniqueKeywords[lower] = true
			final = append(final, kw)
		}
	}

	return final
}
